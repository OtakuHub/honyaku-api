// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using honyaku_api.Models;
using honyaku_api.Data.EFCore;

namespace honyaku_api.Migrations
{
    [DbContext(typeof(honyakuapiContext))]
    [Migration("20200913213910_InitializeDatabase")]
    partial class InitializeDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("honyaku_api.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AuthorId")
                        .HasColumnName("author_id")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnName("content")
                        .HasColumnType("text");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnName("created_at")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnName("updated_at")
                        .HasColumnType("text");

                    b.Property<int?>("WorkId")
                        .HasColumnName("work_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("WorkId");

                    b.ToTable("comment");
                });

            modelBuilder.Entity("honyaku_api.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("genre");
                });

            modelBuilder.Entity("honyaku_api.Models.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IpAddress")
                        .HasColumnName("ip_address")
                        .HasColumnType("text");

                    b.Property<string>("UserAgent")
                        .HasColumnName("user_agent")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("Value")
                        .HasName("token_value_index");

                    b.ToTable("token");
                });

            modelBuilder.Entity("honyaku_api.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("text");

                    b.Property<bool>("IsTranslator")
                        .HasColumnName("is_translator")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePicture")
                        .HasColumnName("profile_picture")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("user_email_key");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasName("user_username_key");

                    b.ToTable("user");
                });

            modelBuilder.Entity("honyaku_api.Models.Work", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnName("category")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnName("picture")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Category")
                        .HasName("work_category_index");

                    b.ToTable("work");
                });

            modelBuilder.Entity("honyaku_api.Models.WorkGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("GenreId")
                        .HasColumnName("genre_id")
                        .HasColumnType("integer");

                    b.Property<int?>("WorkId")
                        .HasColumnName("work_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("WorkId");

                    b.ToTable("work_genre");
                });

            modelBuilder.Entity("honyaku_api.Models.WorkTranslator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("TranslatorId")
                        .HasColumnName("translator_id")
                        .HasColumnType("integer");

                    b.Property<int?>("WorkId")
                        .HasColumnName("work_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TranslatorId");

                    b.HasIndex("WorkId");

                    b.ToTable("work_translator");
                });

            modelBuilder.Entity("honyaku_api.Models.Comment", b =>
                {
                    b.HasOne("honyaku_api.Models.User", "Author")
                        .WithMany("Comment")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("fk_author_comment")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("honyaku_api.Models.Work", "Work")
                        .WithMany("Comment")
                        .HasForeignKey("WorkId")
                        .HasConstraintName("fk_work_comment")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("honyaku_api.Models.Token", b =>
                {
                    b.HasOne("honyaku_api.Models.User", "User")
                        .WithMany("Token")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_token")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("honyaku_api.Models.WorkGenre", b =>
                {
                    b.HasOne("honyaku_api.Models.Genre", "Genre")
                        .WithMany("WorkGenre")
                        .HasForeignKey("GenreId")
                        .HasConstraintName("fk_genre_work")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("honyaku_api.Models.Work", "Work")
                        .WithMany("WorkGenre")
                        .HasForeignKey("WorkId")
                        .HasConstraintName("fk_work_genre")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("honyaku_api.Models.WorkTranslator", b =>
                {
                    b.HasOne("honyaku_api.Models.User", "Translator")
                        .WithMany("WorkTranslator")
                        .HasForeignKey("TranslatorId")
                        .HasConstraintName("fk_translator_work")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("honyaku_api.Models.Work", "Work")
                        .WithMany("WorkTranslator")
                        .HasForeignKey("WorkId")
                        .HasConstraintName("fk_work_translator")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
